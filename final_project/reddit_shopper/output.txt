{'kind': 'Listing',
 'data': {'after': 't3_1ixrj89',
  'dist': 100,
  'modhash': '',
  'geo_filter': '',
  'children': [{'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': "Summary: This week I landed a new type of interpreter into Python 3.14. It improves performance by -3-30% (I actually removed outliers, otherwise it's 45%), and a geometric mean of ~~9-15%~~(EDIT: 3-5%, see correction notice below) faster on pyperformance depending on platform and architecture.\xa0**The main caveat however is that it only works with the newest compilers (Clang 19 and newer).**\xa0We made this opt-in, so there's no backward compatibility concerns. Once the compilers start catching up a few years down the road, I expect this feature to become widespread.\n\nPython 3.14 documentation: [https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-tail-call](https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-tail-call)\n\nI have a lot of people to thank for their ideas and help: Mark Shannon, Donghee Na, Diego Russo, Garrett Gu, Haoran Xu, and Josh Haberman. Also my academic supervisors Stefan Marr and Manuel Rigger :).\n\n(Sorry can't cross-post here) Original post: [https://www.reddit.com/r/ProgrammingLanguages/comments/1ikqi0d/a\\_new\\_type\\_of\\_interpreter\\_has\\_been\\_added\\_to/](https://www.reddit.com/r/ProgrammingLanguages/comments/1ikqi0d/a_new_type_of_interpreter_has_been_added_to/)\n\nEDIT:\n\nThe performance numbers given were wrong due to a compiler bug in LLVM 19. I've since revised downwards the numbers to account for the bug. I sincerely apologize to anyone I have unintentionally misled. I was not aware of the compiler bug myself. See the original release notes for an updated explanation.",
     'author_fullname': 't2_19bup6gilc',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'A new type of interpreter has been added to Python 3.14 with much better performance',
     'link_flair_richtext': [{'e': 'text', 't': 'News'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'news',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1iks79k',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.99,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 1162,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'News',
     'can_mod_post': False,
     'score': 1162,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': 1741243823.0,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'post_hint': 'self',
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1739034861.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Summary: This week I landed a new type of interpreter into Python 3.14. It improves performance by -3-30% (I actually removed outliers, otherwise it&amp;#39;s 45%), and a geometric mean of &lt;del&gt;9-15%&lt;/del&gt;(EDIT: 3-5%, see correction notice below) faster on pyperformance depending on platform and architecture.\xa0&lt;strong&gt;The main caveat however is that it only works with the newest compilers (Clang 19 and newer).&lt;/strong&gt;\xa0We made this opt-in, so there&amp;#39;s no backward compatibility concerns. Once the compilers start catching up a few years down the road, I expect this feature to become widespread.&lt;/p&gt;\n\n&lt;p&gt;Python 3.14 documentation: &lt;a href="https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-tail-call"&gt;https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-tail-call&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I have a lot of people to thank for their ideas and help: Mark Shannon, Donghee Na, Diego Russo, Garrett Gu, Haoran Xu, and Josh Haberman. Also my academic supervisors Stefan Marr and Manuel Rigger :).&lt;/p&gt;\n\n&lt;p&gt;(Sorry can&amp;#39;t cross-post here) Original post: &lt;a href="https://www.reddit.com/r/ProgrammingLanguages/comments/1ikqi0d/a_new_type_of_interpreter_has_been_added_to/"&gt;https://www.reddit.com/r/ProgrammingLanguages/comments/1ikqi0d/a_new_type_of_interpreter_has_been_added_to/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;EDIT:&lt;/p&gt;\n\n&lt;p&gt;The performance numbers given were wrong due to a compiler bug in LLVM 19. I&amp;#39;ve since revised downwards the numbers to account for the bug. I sincerely apologize to anyone I have unintentionally misled. I was not aware of the compiler bug myself. See the original release notes for an updated explanation.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/I4mAIxjeqmmLl8txBvSz8EKc4aNSpyqXuUnGYSxBwFA.jpg?auto=webp&amp;s=37f314f7948504e2793ea31fb04411aea0025a0a',
         'width': 200,
         'height': 200},
        'resolutions': [{'url': 'https://external-preview.redd.it/I4mAIxjeqmmLl8txBvSz8EKc4aNSpyqXuUnGYSxBwFA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c055e8c7b068389a8891cec53b8256dbcd79fd64',
          'width': 108,
          'height': 108}],
        'variants': {},
        'id': 'qsyApzksUdlxqY7z2ubJCNmhQilhXIOl25dSHcQQLB4'}],
      'enabled': False},
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0ad780a0-1c5e-11ea-978c-0ee7bacb2bff',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#7193ff',
     'id': '1iks79k',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'kenjin4096',
     'discussion_type': None,
     'num_comments': 112,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1iks79k/a_new_type_of_interpreter_has_been_added_to/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1iks79k/a_new_type_of_interpreter_has_been_added_to/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1739034861.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': "# Is this a dumb joke? Yes. Is this the only shot we'll have at a joke like this? Yes. And is this a great way to celebrate what Pi's done for us Python developers? Totally.\n\nI mean Python is heavily built around the magic number we know as 3.14, from games, charts and music, to even just screwing around with arithmetic functions! So why not appreciate pi's work with a special Python version?\n\nThe petition can be found here:  \n[https://www.change.org/p/rename-python-3-14-to-pithon](https://www.change.org/p/rename-python-3-14-to-pithon)\n\nPlease sign it and share when you can!\n\n# Edit: yeah, renaming it just for v3.14 is probably a bad thought, but i mean it would still be funny as a nickname!",
     'author_fullname': 't2_17p62tzwi2',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'Petition to rename Python 3.14 to Pithon!',
     'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'discussion',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1j43aar',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.81,
     'author_flair_background_color': 'transparent',
     'subreddit_type': 'public',
     'ups': 1080,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': '67d01c9c-537b-11ee-b0d0-7225f76af176',
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Discussion',
     'can_mod_post': False,
     'score': 1080,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': 1741220008.0,
     'author_flair_css_class': None,
     'author_flair_richtext': [{'e': 'text', 't': 'Pythonista'}],
     'gildings': {},
     'post_hint': 'self',
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1741181995.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'richtext',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;h1&gt;Is this a dumb joke? Yes. Is this the only shot we&amp;#39;ll have at a joke like this? Yes. And is this a great way to celebrate what Pi&amp;#39;s done for us Python developers? Totally.&lt;/h1&gt;\n\n&lt;p&gt;I mean Python is heavily built around the magic number we know as 3.14, from games, charts and music, to even just screwing around with arithmetic functions! So why not appreciate pi&amp;#39;s work with a special Python version?&lt;/p&gt;\n\n&lt;p&gt;The petition can be found here:&lt;br/&gt;\n&lt;a href="https://www.change.org/p/rename-python-3-14-to-pithon"&gt;https://www.change.org/p/rename-python-3-14-to-pithon&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Please sign it and share when you can!&lt;/p&gt;\n\n&lt;h1&gt;Edit: yeah, renaming it just for v3.14 is probably a bad thought, but i mean it would still be funny as a nickname!&lt;/h1&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/DaNcbjRuXsbb6w4SMyC6NAroMCWuzVyuZpv7NALHrIs.jpg?auto=webp&amp;s=f7184e2abc58219a8f1ece57951bff9c7260cb9d',
         'width': 1198,
         'height': 674},
        'resolutions': [{'url': 'https://external-preview.redd.it/DaNcbjRuXsbb6w4SMyC6NAroMCWuzVyuZpv7NALHrIs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=7288a8dab4ccff5da23e65cc158b86a507eea51d',
          'width': 108,
          'height': 60},
         {'url': 'https://external-preview.redd.it/DaNcbjRuXsbb6w4SMyC6NAroMCWuzVyuZpv7NALHrIs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ce72b16e2446407d3037a338bdc83e7e590b6fbe',
          'width': 216,
          'height': 121},
         {'url': 'https://external-preview.redd.it/DaNcbjRuXsbb6w4SMyC6NAroMCWuzVyuZpv7NALHrIs.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ad5e470d8b22508815cba93235d95b9f0ff5c8d8',
          'width': 320,
          'height': 180},
         {'url': 'https://external-preview.redd.it/DaNcbjRuXsbb6w4SMyC6NAroMCWuzVyuZpv7NALHrIs.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e3778b5182aa5ec9b5024549a156d958b57614b8',
          'width': 640,
          'height': 360},
         {'url': 'https://external-preview.redd.it/DaNcbjRuXsbb6w4SMyC6NAroMCWuzVyuZpv7NALHrIs.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=d2c9c172a02d15fae71d9c784fc89f01282eba40',
          'width': 960,
          'height': 540},
         {'url': 'https://external-preview.redd.it/DaNcbjRuXsbb6w4SMyC6NAroMCWuzVyuZpv7NALHrIs.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=579b15fd9152493c043e78ebff89bfff135690b3',
          'width': 1080,
          'height': 607}],
        'variants': {},
        'id': 'W0cZRG32g0vIW4JbVNf5C8kdJYjHqhScNPBJjezGHx0'}],
      'enabled': False},
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': 'Pythonista',
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#f50057',
     'id': '1j43aar',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'Local_Accountant_467',
     'discussion_type': None,
     'num_comments': 114,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': 'dark',
     'permalink': '/r/Python/comments/1j43aar/petition_to_rename_python_314_to_pithon/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1j43aar/petition_to_rename_python_314_to_pithon/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1741181995.0,
     'num_crossposts': 1,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': "**Github** : [https://github.com/himanshu2406/Algo.Py](https://github.com/himanshu2406/Algo.Py)\n\n# What My Project Does\n\nSo I've been working on a framework made in Python that makes **live trading** incredibly easy, and even almost no-code !\n\nIt seamlessly integrates with **any preset backtesting strategy**, allowing you to take them **straight to live trading** with minimal effort.\n\n**Dashboard Overview :** [https://youtu.be/OmlaBnGcUi4?si=e1aizaIaYpRNMHFd](https://youtu.be/OmlaBnGcUi4?si=e1aizaIaYpRNMHFd)\n\n**One-Click Backtest Deployment Overview :** [https://youtu.be/T\\_otTHdLCCY?si=A7ujRzV6I5ESfgEQ](https://youtu.be/T_otTHdLCCY?si=A7ujRzV6I5ESfgEQ)\n\nIt's still in very **early beta**, but I’ve packed in as many functional features as possible, including:\n\n# Key Features\n\n* **Intuitive Dashboard**\n* Easily **backtest, view results,  save and deploy** in a single click.\n   * **Auto-Detects Your Strategy** – If your function generates valid entry/exit signals, the framework will **automatically detect and integrate it**.\n   * **Scheduler for Automation** – Run your entire pipeline at custom **fixed intervals or specific times**\n* **Custom Data Layer (Finstore):**\n* Stores and streams data using a **Parquet-based data lake**, making it **much faster** than traditional databases.\n   * **Multi-Broker Support** – Execute across multiple brokers with **real-time debug logs** via Telegram.\n   * **End-to-End Pipelines** – Effortlessly fetch, store, and stream data for **crypto, equities, and more**.\n* **Multi-Asset Backtests** :\n   * Backtest a strategy across an entire market across hundreds of symbols and thousands of data points within seconds.\n   * One-Click backtests across entire markets : Crypto , U.S Equity , Indian Equity &amp; adding more.\n\n# Advanced Market Visualization\n\n**Live Order Book Heatmap** – Real-time Binance order book visualization. Represents market orders with volume bubbles to identify iceberg orders easily. Also Visualizes resting orders on the orderbook.\n\n**Live Footprint Chart** – Captures trade flow via Binance WebSocket data. Makes order book trading extremely easy.\n\n# Smart OMS (Order Management System)\n\n* **Limit Order Chaser** – Reduces fees by executing market orders **while chasing the mark price**.\n* **AI-Powered OMS** – An autonomous AI agent can **execute, close, and manage trades**, plus run **complex local strategies**.\n\n# Risk Management System (RMS)\n\n* **Portfolio Aggregation** – Monitors all broker portfolios to **notify and manage over-exposed positions**.\n\n*And working on many other features &amp; improvements!*\n\n# Target Audience\n\n* Anyone who wants to backtest or deploy their strategies but don't have a lot of technical know-how on how to build their own framework\n* Retail traders who have been manually implementing their strategies - can now easily automate them across entire markets.\n* Quant Traders who want to build a common robust community framework for algo trading.\n\n# Comparison\n\n* backtesting py :  seems to be outdated but only works on implementing strategy backtests but doesn't offer strategy deployment with ease.\n* tensorcharts , quantower, etc : charting platforms that provide advanced charting for L1, L2 Data for a hefty price. This can now be done for free locally.\n* PyAlgoTrade : Also deprecated but alternatives do not offer a framework to deploy strategies.\n\nThe repo still has tons of stale code and bugs but I would **love for some of you to test it out!**\n\nLet me know what you guys think !",
     'author_fullname': 't2_42v8rf4c',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'I Built an Open-Source Algo Trading Framework for Instant Backtests &amp; Live Deployment',
     'link_flair_richtext': [{'e': 'text', 't': 'Showcase'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'showcase',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1iwccvr',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.94,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 725,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Showcase',
     'can_mod_post': False,
     'score': 725,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'post_hint': 'self',
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740323852.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt; : &lt;a href="https://github.com/himanshu2406/Algo.Py"&gt;https://github.com/himanshu2406/Algo.Py&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;So I&amp;#39;ve been working on a framework made in Python that makes &lt;strong&gt;live trading&lt;/strong&gt; incredibly easy, and even almost no-code !&lt;/p&gt;\n\n&lt;p&gt;It seamlessly integrates with &lt;strong&gt;any preset backtesting strategy&lt;/strong&gt;, allowing you to take them &lt;strong&gt;straight to live trading&lt;/strong&gt; with minimal effort.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Dashboard Overview :&lt;/strong&gt; &lt;a href="https://youtu.be/OmlaBnGcUi4?si=e1aizaIaYpRNMHFd"&gt;https://youtu.be/OmlaBnGcUi4?si=e1aizaIaYpRNMHFd&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;One-Click Backtest Deployment Overview :&lt;/strong&gt; &lt;a href="https://youtu.be/T_otTHdLCCY?si=A7ujRzV6I5ESfgEQ"&gt;https://youtu.be/T_otTHdLCCY?si=A7ujRzV6I5ESfgEQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s still in very &lt;strong&gt;early beta&lt;/strong&gt;, but I’ve packed in as many functional features as possible, including:&lt;/p&gt;\n\n&lt;h1&gt;Key Features&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Intuitive Dashboard&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Easily &lt;strong&gt;backtest, view results,  save and deploy&lt;/strong&gt; in a single click.\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Auto-Detects Your Strategy&lt;/strong&gt; – If your function generates valid entry/exit signals, the framework will &lt;strong&gt;automatically detect and integrate it&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Scheduler for Automation&lt;/strong&gt; – Run your entire pipeline at custom &lt;strong&gt;fixed intervals or specific times&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Custom Data Layer (Finstore):&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Stores and streams data using a &lt;strong&gt;Parquet-based data lake&lt;/strong&gt;, making it &lt;strong&gt;much faster&lt;/strong&gt; than traditional databases.\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Multi-Broker Support&lt;/strong&gt; – Execute across multiple brokers with &lt;strong&gt;real-time debug logs&lt;/strong&gt; via Telegram.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;End-to-End Pipelines&lt;/strong&gt; – Effortlessly fetch, store, and stream data for &lt;strong&gt;crypto, equities, and more&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Multi-Asset Backtests&lt;/strong&gt; :\n\n&lt;ul&gt;\n&lt;li&gt;Backtest a strategy across an entire market across hundreds of symbols and thousands of data points within seconds.&lt;/li&gt;\n&lt;li&gt;One-Click backtests across entire markets : Crypto , U.S Equity , Indian Equity &amp;amp; adding more.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Advanced Market Visualization&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Live Order Book Heatmap&lt;/strong&gt; – Real-time Binance order book visualization. Represents market orders with volume bubbles to identify iceberg orders easily. Also Visualizes resting orders on the orderbook.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Live Footprint Chart&lt;/strong&gt; – Captures trade flow via Binance WebSocket data. Makes order book trading extremely easy.&lt;/p&gt;\n\n&lt;h1&gt;Smart OMS (Order Management System)&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Limit Order Chaser&lt;/strong&gt; – Reduces fees by executing market orders &lt;strong&gt;while chasing the mark price&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;AI-Powered OMS&lt;/strong&gt; – An autonomous AI agent can &lt;strong&gt;execute, close, and manage trades&lt;/strong&gt;, plus run &lt;strong&gt;complex local strategies&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Risk Management System (RMS)&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Portfolio Aggregation&lt;/strong&gt; – Monitors all broker portfolios to &lt;strong&gt;notify and manage over-exposed positions&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;And working on many other features &amp;amp; improvements!&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Anyone who wants to backtest or deploy their strategies but don&amp;#39;t have a lot of technical know-how on how to build their own framework&lt;/li&gt;\n&lt;li&gt;Retail traders who have been manually implementing their strategies - can now easily automate them across entire markets.&lt;/li&gt;\n&lt;li&gt;Quant Traders who want to build a common robust community framework for algo trading.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;backtesting py :  seems to be outdated but only works on implementing strategy backtests but doesn&amp;#39;t offer strategy deployment with ease.&lt;/li&gt;\n&lt;li&gt;tensorcharts , quantower, etc : charting platforms that provide advanced charting for L1, L2 Data for a hefty price. This can now be done for free locally.&lt;/li&gt;\n&lt;li&gt;PyAlgoTrade : Also deprecated but alternatives do not offer a framework to deploy strategies.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The repo still has tons of stale code and bugs but I would &lt;strong&gt;love for some of you to test it out!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Let me know what you guys think !&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/Acjkxtq-oT3LlU5Q3aAQ9f-HrTMvPF4GkXzEJiAD2HI.jpg?auto=webp&amp;s=2c6cd658edc89227b581cd101ca05d1610d539c5',
         'width': 1200,
         'height': 600},
        'resolutions': [{'url': 'https://external-preview.redd.it/Acjkxtq-oT3LlU5Q3aAQ9f-HrTMvPF4GkXzEJiAD2HI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=042af5b5ba231ef6572a184e4576336392461270',
          'width': 108,
          'height': 54},
         {'url': 'https://external-preview.redd.it/Acjkxtq-oT3LlU5Q3aAQ9f-HrTMvPF4GkXzEJiAD2HI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=03e77b18a81791388445c22de2371ab48e11f52a',
          'width': 216,
          'height': 108},
         {'url': 'https://external-preview.redd.it/Acjkxtq-oT3LlU5Q3aAQ9f-HrTMvPF4GkXzEJiAD2HI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f31661cd81e117fd60e71dd912e8abb4fe2890ee',
          'width': 320,
          'height': 160},
         {'url': 'https://external-preview.redd.it/Acjkxtq-oT3LlU5Q3aAQ9f-HrTMvPF4GkXzEJiAD2HI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e3ee938fa286d2406a05caf20db0ea8633d54139',
          'width': 640,
          'height': 320},
         {'url': 'https://external-preview.redd.it/Acjkxtq-oT3LlU5Q3aAQ9f-HrTMvPF4GkXzEJiAD2HI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=87a4a162c1e9305c06e784fdc9127ebc3a329aaf',
          'width': 960,
          'height': 480},
         {'url': 'https://external-preview.redd.it/Acjkxtq-oT3LlU5Q3aAQ9f-HrTMvPF4GkXzEJiAD2HI.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4a483a80ce4c17d874fe9c80d71eb204adc28d90',
          'width': 1080,
          'height': 540}],
        'variants': {},
        'id': '5rF1AZdE7KFZ3k0Zavnsi5fLi0TZO9FECzADaKFSC9A'}],
      'enabled': False},
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': 'f35fb004-c1ff-11ee-8305-565bc5d0cc73',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#ff66ac',
     'id': '1iwccvr',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'AnonDoser',
     'discussion_type': None,
     'num_comments': 24,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1iwccvr/i_built_an_opensource_algo_trading_framework_for/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1iwccvr/i_built_an_opensource_algo_trading_framework_for/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740323852.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'Not sure why I’ve never heard about this, but apparently you can use else with a while loop. I’ve always used a separate flag variable \n\nThis will execute when the while condition is false but not if you break out of the loop early.\n\nFor example:\n\n**Using flag**\n\n```\nnums = [1, 3, 5, 7, 9]\ntarget = 4\nfound = False\ni = 0\n\nwhile i &lt; len(nums):\n    if nums[i] == target:\n        found = True\n        print("Found:", target)\n        break\n    i += 1\n\nif not found:\n    print("Not found")\n```\n\n**Using else**\n\n```\nnums = [1, 3, 5, 7, 9]\ntarget = 4\ni = 0\n\nwhile i &lt; len(nums):\n    if nums[i] == target:\n        print("Found:", target)\n        break\n    i += 1\nelse:\n    print("Not found")\n```',
     'author_fullname': 't2_1305vi',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'TIL you can use else with a while loop',
     'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'discussion',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1j1axht',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.93,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 624,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Discussion',
     'can_mod_post': False,
     'score': 624,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': 1740866532.0,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740866306.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Not sure why I’ve never heard about this, but apparently you can use else with a while loop. I’ve always used a separate flag variable &lt;/p&gt;\n\n&lt;p&gt;This will execute when the while condition is false but not if you break out of the loop early.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Using flag&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;```\nnums = [1, 3, 5, 7, 9]\ntarget = 4\nfound = False\ni = 0&lt;/p&gt;\n\n&lt;p&gt;while i &amp;lt; len(nums):\n    if nums[i] == target:\n        found = True\n        print(&amp;quot;Found:&amp;quot;, target)\n        break\n    i += 1&lt;/p&gt;\n\n&lt;p&gt;if not found:\n    print(&amp;quot;Not found&amp;quot;)\n```&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Using else&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;```\nnums = [1, 3, 5, 7, 9]\ntarget = 4\ni = 0&lt;/p&gt;\n\n&lt;p&gt;while i &amp;lt; len(nums):\n    if nums[i] == target:\n        print(&amp;quot;Found:&amp;quot;, target)\n        break\n    i += 1\nelse:\n    print(&amp;quot;Not found&amp;quot;)\n```&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#f50057',
     'id': '1j1axht',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'cristinon',
     'discussion_type': None,
     'num_comments': 198,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1j1axht/til_you_can_use_else_with_a_while_loop/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1j1axht/til_you_can_use_else_with_a_while_loop/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740866306.0,
     'num_crossposts': 1,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'Hi!\nI am a devops engineer and notice developers talking about uv package manager.  I used it today for the first time and loved it. It seems like everyone is talking to agrees. Does anyone have and cons for us package manager?',
     'author_fullname': 't2_isqnz3ln',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'Is UV package manager taking over?',
     'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'discussion',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1isv37n',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.95,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 545,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Discussion',
     'can_mod_post': False,
     'score': 545,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1739933535.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi!\nI am a devops engineer and notice developers talking about uv package manager.  I used it today for the first time and loved it. It seems like everyone is talking to agrees. Does anyone have and cons for us package manager?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#f50057',
     'id': '1isv37n',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'RubKey1143',
     'discussion_type': None,
     'num_comments': 336,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1isv37n/is_uv_package_manager_taking_over/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1isv37n/is_uv_package_manager_taking_over/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1739933535.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'I’m transitioning from bartending to data analysis at 37yo through an online course called CareerFoundry and I think I’ve made a huge mistake. I do not feel prepared to enter the job market with my new skills. For example It has taken me 6 full hours today just trying to START a project in VSCode and I don’t understand any of the troubleshooting I’m doing. (I don’t remember learning about virtual environments during the course) we did the whole course in Jupyter and now I find out vscode is the standard and it’s an entirely different platform I can’t figure out. I feel like every step forward is 100 steps back. \n\nCould anyone share their “aha!” Moment with coding? I could really use the encouragement. Or have I made a huge mistake and this just isn’t for me? Thanks for reading this far!! Any advice is appreciated. ',
     'author_fullname': 't2_15u7yj9q97',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'New to coding. Is it always this difficult?',
     'link_flair_richtext': [{'e': 'text', 't': 'Tutorial'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'tutorial',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1iuyt0y',
     'quarantine': False,
     'link_flair_text_color': 'dark',
     'upvote_ratio': 0.9,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 483,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Tutorial',
     'can_mod_post': False,
     'score': 483,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740164702.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I’m transitioning from bartending to data analysis at 37yo through an online course called CareerFoundry and I think I’ve made a huge mistake. I do not feel prepared to enter the job market with my new skills. For example It has taken me 6 full hours today just trying to START a project in VSCode and I don’t understand any of the troubleshooting I’m doing. (I don’t remember learning about virtual environments during the course) we did the whole course in Jupyter and now I find out vscode is the standard and it’s an entirely different platform I can’t figure out. I feel like every step forward is 100 steps back. &lt;/p&gt;\n\n&lt;p&gt;Could anyone share their “aha!” Moment with coding? I could really use the encouragement. Or have I made a huge mistake and this just isn’t for me? Thanks for reading this far!! Any advice is appreciated. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '7987a74c-04d8-11eb-84ca-0e0ac8b5a78f',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#dadada',
     'id': '1iuyt0y',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'Admirable_Long9546',
     'discussion_type': None,
     'num_comments': 328,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1iuyt0y/new_to_coding_is_it_always_this_difficult/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1iuyt0y/new_to_coding_is_it_always_this_difficult/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740164702.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'When I first learned python back in versions 3.6 and 3.7 I regarded type hinting as a purely styling feature.  It was well rooted in my mind that python code with or without type hinting will run the same and it is used only for readability -- basically just us developers being kind to each other.\n\nNowadays more and more packages are using type hinting for core functions. SQLAlchemy is using it to declare SQL column types (Mapped), FastAPI + Pydantic is using it for HTTP payloads and auto-documentation, and dataclasses uses it to construct (shockingly) data classes.\n\nDon\'t get me wrong, I\'m supportive of type hinting\\\\annotations. I\'m also well aware that all of these packages will execute just fine without it. But maybe it\'s fair to say that in modern python applications type hinting is a core feature and not just for styling and garnishing.\n\nEdit: I actually find type annotations very useful, I\'m not against it. I wanted to discuss whether it\'s really "optional" due to its widespread integration in libraries. I like u/all4Nature point: I\'m thinking on it from a software engineer prespective, data analysts will probably disagree that type hinting is as widespread as I thought.',
     'author_fullname': 't2_irkhz',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'What the hell is going on with type hinting these days',
     'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'discussion',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1itzac1',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.87,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 419,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Discussion',
     'can_mod_post': False,
     'score': 419,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': 1740070785.0,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740060505.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;When I first learned python back in versions 3.6 and 3.7 I regarded type hinting as a purely styling feature.  It was well rooted in my mind that python code with or without type hinting will run the same and it is used only for readability -- basically just us developers being kind to each other.&lt;/p&gt;\n\n&lt;p&gt;Nowadays more and more packages are using type hinting for core functions. SQLAlchemy is using it to declare SQL column types (Mapped), FastAPI + Pydantic is using it for HTTP payloads and auto-documentation, and dataclasses uses it to construct (shockingly) data classes.&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t get me wrong, I&amp;#39;m supportive of type hinting\\annotations. I&amp;#39;m also well aware that all of these packages will execute just fine without it. But maybe it&amp;#39;s fair to say that in modern python applications type hinting is a core feature and not just for styling and garnishing.&lt;/p&gt;\n\n&lt;p&gt;Edit: I actually find type annotations very useful, I&amp;#39;m not against it. I wanted to discuss whether it&amp;#39;s really &amp;quot;optional&amp;quot; due to its widespread integration in libraries. I like &lt;a href="/u/all4Nature"&gt;u/all4Nature&lt;/a&gt; point: I&amp;#39;m thinking on it from a software engineer prespective, data analysts will probably disagree that type hinting is as widespread as I thought.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#f50057',
     'id': '1itzac1',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'The_prrrt',
     'discussion_type': None,
     'num_comments': 266,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1itzac1/what_the_hell_is_going_on_with_type_hinting_these/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1itzac1/what_the_hell_is_going_on_with_type_hinting_these/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740060505.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'Guido van Rossum began working on Python language in the late 1980s as a successor to the ABC programming language. The first version, Python 0.9.0, was released on this day, February 20, 1991. ',
     'author_fullname': 't2_iwtba27g',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'Happy Birthday, Python! 🎉🐍',
     'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'discussion',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1itu5mn',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.99,
     'author_flair_background_color': 'transparent',
     'subreddit_type': 'public',
     'ups': 377,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': '23190a36-537c-11ee-bf5a-a2ab421cd045',
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Discussion',
     'can_mod_post': False,
     'score': 377,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [{'e': 'text', 't': 'Pythoneer'}],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740041609.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'richtext',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Guido van Rossum began working on Python language in the late 1980s as a successor to the ABC programming language. The first version, Python 0.9.0, was released on this day, February 20, 1991. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': 'Pythoneer',
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#f50057',
     'id': '1itu5mn',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'lutipri',
     'discussion_type': None,
     'num_comments': 25,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': 'dark',
     'permalink': '/r/Python/comments/1itu5mn/happy_birthday_python/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1itu5mn/happy_birthday_python/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740041609.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'I spent the entire day today working on some complex ETL. So many hours spent building, testing, fine-tuning. Once I got it working I was updating the built in sphinx documentation, running the ‘make html’ command several times in the terminal. Turns out I had at one point in this active terminal, done a ‘git reset —hard’ command. While pressing up to cycle through commands, I accidentally ran git reset hard. All my work for the entire day was GONE. I have f’d up at work before, but never this bad. I was mortified.\n\nI had a moment of panic, and then asked chatGPT if there was any way to recover. The git log options it gave did not work. I then asked if PyCharm had any solutions for this. THERE IS A LOCAL HISTORY FEATURE THAT SAVED ME. It saves your changes and I was able to recover it all. Thank you to JetBrains for this amazing product. Four years with this product and I’m still learning about amazing features like this. ',
     'author_fullname': 't2_hbwrihj',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'Appreciation post for PyCharm',
     'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'discussion',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1iume26',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.93,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 327,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Discussion',
     'can_mod_post': False,
     'score': 327,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740127437.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I spent the entire day today working on some complex ETL. So many hours spent building, testing, fine-tuning. Once I got it working I was updating the built in sphinx documentation, running the ‘make html’ command several times in the terminal. Turns out I had at one point in this active terminal, done a ‘git reset —hard’ command. While pressing up to cycle through commands, I accidentally ran git reset hard. All my work for the entire day was GONE. I have f’d up at work before, but never this bad. I was mortified.&lt;/p&gt;\n\n&lt;p&gt;I had a moment of panic, and then asked chatGPT if there was any way to recover. The git log options it gave did not work. I then asked if PyCharm had any solutions for this. THERE IS A LOCAL HISTORY FEATURE THAT SAVED ME. It saves your changes and I was able to recover it all. Thank you to JetBrains for this amazing product. Four years with this product and I’m still learning about amazing features like this. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#f50057',
     'id': '1iume26',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'ragnartheaccountant',
     'discussion_type': None,
     'num_comments': 62,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1iume26/appreciation_post_for_pycharm/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1iume26/appreciation_post_for_pycharm/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740127437.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'One very under-appreciated advice I\'m often giving to people starting with Python (or wanting to dive much deeper) is to follow the annual Python Conference (PyCon) and watch a few talks. \n\nBy far not all of them are relevant for most people. Some thing go very deep in how the language works intrinsically, or marginal optimizations for machine-learning stacks, but by and large it\'s really one of the best ways to keep up with the language and the community.\n\n  \nJust search "PyCon 20xx" (e.g 2024) on Youtube and you\'ll find most/all of them there.\n\n  \nFor example, one talk I absolutely love from the PyCon 2018 (yes, 2018!) is a talk by Hillel Wayne on testing better: [https://www.youtube.com/watch?v=MYucYon2-lk](https://www.youtube.com/watch?v=MYucYon2-lk)\n\nSome things get old, deprecated, some things are just making you a better dev.',
     'author_fullname': 't2_5vnguo1z',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'Follow the yearly PyCon if you want to get better at using Python',
     'link_flair_richtext': [{'e': 'text', 't': 'Resource'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'resource',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1iurnjd',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.98,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 318,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Resource',
     'can_mod_post': False,
     'score': 318,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'post_hint': 'self',
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740146719.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;One very under-appreciated advice I&amp;#39;m often giving to people starting with Python (or wanting to dive much deeper) is to follow the annual Python Conference (PyCon) and watch a few talks. &lt;/p&gt;\n\n&lt;p&gt;By far not all of them are relevant for most people. Some thing go very deep in how the language works intrinsically, or marginal optimizations for machine-learning stacks, but by and large it&amp;#39;s really one of the best ways to keep up with the language and the community.&lt;/p&gt;\n\n&lt;p&gt;Just search &amp;quot;PyCon 20xx&amp;quot; (e.g 2024) on Youtube and you&amp;#39;ll find most/all of them there.&lt;/p&gt;\n\n&lt;p&gt;For example, one talk I absolutely love from the PyCon 2018 (yes, 2018!) is a talk by Hillel Wayne on testing better: &lt;a href="https://www.youtube.com/watch?v=MYucYon2-lk"&gt;https://www.youtube.com/watch?v=MYucYon2-lk&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Some things get old, deprecated, some things are just making you a better dev.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/I7Yj79R0NuB1nFf3_zUSEX2CQOchIzFooz1upMOzKg0.jpg?auto=webp&amp;s=7581a7a826b72213f4c369d5164cd9d80cbc3585',
         'width': 480,
         'height': 360},
        'resolutions': [{'url': 'https://external-preview.redd.it/I7Yj79R0NuB1nFf3_zUSEX2CQOchIzFooz1upMOzKg0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d27748c243fe08123041d841e038719a13d406d1',
          'width': 108,
          'height': 81},
         {'url': 'https://external-preview.redd.it/I7Yj79R0NuB1nFf3_zUSEX2CQOchIzFooz1upMOzKg0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=7132033c08891001aff4bdbb6a7962986d1dfbac',
          'width': 216,
          'height': 162},
         {'url': 'https://external-preview.redd.it/I7Yj79R0NuB1nFf3_zUSEX2CQOchIzFooz1upMOzKg0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6990fb37a9145e795bebb7882981e10a8e70c1a3',
          'width': 320,
          'height': 240}],
        'variants': {},
        'id': 'v0mh5ki02HMknJPPjUau-jLPzUNlnDdQr8tf2xBpAd8'}],
      'enabled': False},
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': 'f9716fb2-4113-11ea-a3f1-0ef51f60f757',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#ddbd37',
     'id': '1iurnjd',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'No-Win5543',
     'discussion_type': None,
     'num_comments': 17,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1iurnjd/follow_the_yearly_pycon_if_you_want_to_get_better/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1iurnjd/follow_the_yearly_pycon_if_you_want_to_get_better/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740146719.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': "Repo link: [https://github.com/invzfnc/spotify-downloader](https://github.com/invzfnc/spotify-downloader)\n\n**What my project does**  \nHi everyone! I created a lightweight script that lists tracks from a public Spotify playlist and downloads them from YouTube Music.\n\n**Key Features**\n\n* No premium required\n* No login or credentials required\n* Metadata is embedded in downloaded tracks\n* Downloads in higher quality (around 256 kbps)\n\n**Comparison/How is it different from other tools?**  \nI found many tools requiring users to sign up for Spotify Developer account and setup credentials before everything else. This script uses the public Spotify API to retrieve track details, so there's no need to login or setup!\n\n**How's the music quality?**  \nYouTube Music offers streams with higher bitrate (around 256 kbps) compared to YouTube (128 kbps). This script chooses and downloads the best quality audio from YouTube Music without taking up too much storage space.\n\n**Dependencies/Libraries?**  \nUsers are required to install innertube, SpotAPI, yt-dlp and FFmpeg for this script to work.\n\n**Target audience**  \nAnyone who is looking to save their Spotify playlists to local storage, without wanting to login to any platform, and wants something with decent bitrate (\\~256 kbps)\n\nIf you find this project useful or it helped you, feel free to give it a star! I'd really appreciate any feedback!",
     'author_fullname': 't2_7tmd81dt6',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'I made a script to download Spotify playlists without login',
     'link_flair_richtext': [{'e': 'text', 't': 'Showcase'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'showcase',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1ixlsux',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.97,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 295,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Showcase',
     'can_mod_post': False,
     'score': 295,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'post_hint': 'self',
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740455170.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Repo link: &lt;a href="https://github.com/invzfnc/spotify-downloader"&gt;https://github.com/invzfnc/spotify-downloader&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What my project does&lt;/strong&gt;&lt;br/&gt;\nHi everyone! I created a lightweight script that lists tracks from a public Spotify playlist and downloads them from YouTube Music.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;No premium required&lt;/li&gt;\n&lt;li&gt;No login or credentials required&lt;/li&gt;\n&lt;li&gt;Metadata is embedded in downloaded tracks&lt;/li&gt;\n&lt;li&gt;Downloads in higher quality (around 256 kbps)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison/How is it different from other tools?&lt;/strong&gt;&lt;br/&gt;\nI found many tools requiring users to sign up for Spotify Developer account and setup credentials before everything else. This script uses the public Spotify API to retrieve track details, so there&amp;#39;s no need to login or setup!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How&amp;#39;s the music quality?&lt;/strong&gt;&lt;br/&gt;\nYouTube Music offers streams with higher bitrate (around 256 kbps) compared to YouTube (128 kbps). This script chooses and downloads the best quality audio from YouTube Music without taking up too much storage space.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Dependencies/Libraries?&lt;/strong&gt;&lt;br/&gt;\nUsers are required to install innertube, SpotAPI, yt-dlp and FFmpeg for this script to work.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target audience&lt;/strong&gt;&lt;br/&gt;\nAnyone who is looking to save their Spotify playlists to local storage, without wanting to login to any platform, and wants something with decent bitrate (~256 kbps)&lt;/p&gt;\n\n&lt;p&gt;If you find this project useful or it helped you, feel free to give it a star! I&amp;#39;d really appreciate any feedback!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/63DcgBTZJ8vQgsDrNmf3GxhFJS3zxrgtPG9DAea5erE.jpg?auto=webp&amp;s=c57704f52347b73655154c5b5717f716c80f01a7',
         'width': 1200,
         'height': 600},
        'resolutions': [{'url': 'https://external-preview.redd.it/63DcgBTZJ8vQgsDrNmf3GxhFJS3zxrgtPG9DAea5erE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=db31df6194b6e511db1cbb8b2e5106f6c0c83605',
          'width': 108,
          'height': 54},
         {'url': 'https://external-preview.redd.it/63DcgBTZJ8vQgsDrNmf3GxhFJS3zxrgtPG9DAea5erE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f7bcaface1ad6b0e23a19dcdd4782a17770042ec',
          'width': 216,
          'height': 108},
         {'url': 'https://external-preview.redd.it/63DcgBTZJ8vQgsDrNmf3GxhFJS3zxrgtPG9DAea5erE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=145c2477934588a1ffd7f62d72223b4c3ec2dc6f',
          'width': 320,
          'height': 160},
         {'url': 'https://external-preview.redd.it/63DcgBTZJ8vQgsDrNmf3GxhFJS3zxrgtPG9DAea5erE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=1868b0094b27181b8ffaa076a55127f04c4a58de',
          'width': 640,
          'height': 320},
         {'url': 'https://external-preview.redd.it/63DcgBTZJ8vQgsDrNmf3GxhFJS3zxrgtPG9DAea5erE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=cd803fd94a8ed26fa43136a7f1de9c38e83d3dd6',
          'width': 960,
          'height': 480},
         {'url': 'https://external-preview.redd.it/63DcgBTZJ8vQgsDrNmf3GxhFJS3zxrgtPG9DAea5erE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=dcdf510ba254902ced79dccd56436ee756b49549',
          'width': 1080,
          'height': 540}],
        'variants': {},
        'id': 'JERHtpo2l7YKsmrIleE1g1BvBKX7pCIcNJdPc9LDOck'}],
      'enabled': False},
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': 'f35fb004-c1ff-11ee-8305-565bc5d0cc73',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#ff66ac',
     'id': '1ixlsux',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'InverseFunc',
     'discussion_type': None,
     'num_comments': 57,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1ixlsux/i_made_a_script_to_download_spotify_playlists/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1ixlsux/i_made_a_script_to_download_spotify_playlists/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740455170.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': "Hey everyone,\n\nI published my 3rd pypi lib and it's open source. It's called\xa0**stealthkit**\xa0\\- requests on steroids. Good for those who want to send http requests to websites that might not allow it through programming - like amazon, yahoo finance, stock exchanges, etc.\n\n**What My Project Does**\n\n* **User-Agent Rotation**: Automatically rotates user agents from Chrome, Edge, and Safari across different OS platforms (Windows, MacOS, Linux).\n* **Random Referer Selection**: Simulates real browsing behavior by sending requests with randomized referers from search engines.\n* **Cookie Handling**: Fetches and stores cookies from specified URLs to maintain session persistence.\n* **Proxy Support**: Allows requests to be routed through a provided proxy.\n* **Retry Logic**: Retries failed requests up to three times before giving up.\n* **RESTful Requests**: Supports GET, POST, PUT, and DELETE methods with automatic proxy integration.\n\n**Why did I create it?**\n\nIn 2020, I created a yahoo finance lib and it required me to tweak python's requests module heavily - like session, cookies, headers, etc.\n\nIn 2022, I worked on my django project which required it to fetch amazon product data; again I needed requests workaround.\n\nThis year, I created second pypi - amzpy. And I soon understood that all of my projects evolve around web scraping and data processing. So I created a separate lib which can be used in multiple projects. And I am working on another stock exchange python api wrapper which uses this module at its core.\n\nIt's open source, and anyone can fork and add features and use the code as s/he likes.\n\nIf you're into it, please let me know if you liked it.\n\nPypi:\xa0[https://pypi.org/project/stealthkit/](https://pypi.org/project/stealthkit/)\n\nGithub:\xa0[https://github.com/theonlyanil/stealthkit](https://github.com/theonlyanil/stealthkit)\n\n**Target Audience**\n\nDevelopers who scrape websites blocked by anti-bot mechanisms.\n\n**Comparison**\n\nSo far I don't know of any pypi packages that does it better and with such simplicity.",
     'author_fullname': 't2_c14cw27uy',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'I published my third open-source python package to pypi',
     'link_flair_richtext': [{'e': 'text', 't': 'Showcase'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'showcase',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1ipxhsk',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.93,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 291,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Showcase',
     'can_mod_post': False,
     'score': 291,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1739610047.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hey everyone,&lt;/p&gt;\n\n&lt;p&gt;I published my 3rd pypi lib and it&amp;#39;s open source. It&amp;#39;s called\xa0&lt;strong&gt;stealthkit&lt;/strong&gt;\xa0- requests on steroids. Good for those who want to send http requests to websites that might not allow it through programming - like amazon, yahoo finance, stock exchanges, etc.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;User-Agent Rotation&lt;/strong&gt;: Automatically rotates user agents from Chrome, Edge, and Safari across different OS platforms (Windows, MacOS, Linux).&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Random Referer Selection&lt;/strong&gt;: Simulates real browsing behavior by sending requests with randomized referers from search engines.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cookie Handling&lt;/strong&gt;: Fetches and stores cookies from specified URLs to maintain session persistence.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proxy Support&lt;/strong&gt;: Allows requests to be routed through a provided proxy.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Retry Logic&lt;/strong&gt;: Retries failed requests up to three times before giving up.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;RESTful Requests&lt;/strong&gt;: Supports GET, POST, PUT, and DELETE methods with automatic proxy integration.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Why did I create it?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In 2020, I created a yahoo finance lib and it required me to tweak python&amp;#39;s requests module heavily - like session, cookies, headers, etc.&lt;/p&gt;\n\n&lt;p&gt;In 2022, I worked on my django project which required it to fetch amazon product data; again I needed requests workaround.&lt;/p&gt;\n\n&lt;p&gt;This year, I created second pypi - amzpy. And I soon understood that all of my projects evolve around web scraping and data processing. So I created a separate lib which can be used in multiple projects. And I am working on another stock exchange python api wrapper which uses this module at its core.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s open source, and anyone can fork and add features and use the code as s/he likes.&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re into it, please let me know if you liked it.&lt;/p&gt;\n\n&lt;p&gt;Pypi:\xa0&lt;a href="https://pypi.org/project/stealthkit/"&gt;https://pypi.org/project/stealthkit/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Github:\xa0&lt;a href="https://github.com/theonlyanil/stealthkit"&gt;https://github.com/theonlyanil/stealthkit&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Developers who scrape websites blocked by anti-bot mechanisms.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So far I don&amp;#39;t know of any pypi packages that does it better and with such simplicity.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': 'f35fb004-c1ff-11ee-8305-565bc5d0cc73',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#ff66ac',
     'id': '1ipxhsk',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'convicted_redditor',
     'discussion_type': None,
     'num_comments': 28,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1ipxhsk/i_published_my_third_opensource_python_package_to/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1ipxhsk/i_published_my_third_opensource_python_package_to/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1739610047.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'Not sure if this kind of post is allowed here but just wanted to celebrate this because it feels like a major milestone for me.\n\nI\'ve been a software dev for about 10 years but in that time I have never come up with ideas of problems at home that I could solve with code. If I had an idea, there was already a solution out there or it felt like it would take way too much effort to build and implement in Typescript/.NET, which is what I use for my job.\n\nI recently picked up Python at work for a non-GUI data manipulation project and I was really surprised at how simple it is to set up and get going on. Feels like with the other languages I\'ve tried out, you have to do so much configuration and build to even get off the ground, to the point where I\'ve struggled in the past with tutorial courses because something doesn\'t work in configuring the IDE or installing packages, etc.\n\nWell the other day I was poking around with my home network software, trying to figure out if there was a way to get a notification when a certain device connects to the network - my son has been sneaking his school laptop into his room after bedtime to play games, and I absolutely did similar things as a kid but I have to at least try to be the responsible parent and make sure he\'s getting enough sleep, right? There wasn\'t any such functionality, but there was a REST API for checking on the status of clients connected to the network. I realized that I could use Python to set up a polling task that periodically pings that REST endpoint and checks if his Chromebook has connected.\n\nMan, it was so easy to spin up code to make periodic REST calls, keep track of the active status of the device, and then send an email to my cell provider to trigger a text message on my phone if it changes from inactive to active. The only thing that took me a little bit longer was figuring out how virtual environments work. I also need to circle back and do some cleanup and better exception handling, etc, but that\'s less important for a personal project that works great for now.\n\nPackaged it up, threw it on Github (my first ever Github commit!), cloned it to my Linux thin client, and just run the script. So easy, didn\'t have to follow millions of build or setup steps, and now I have a working "product" that does exactly what I need. So glad that I was introduced to Python, it really is a powerful language but at the same time so easy to jump into and make it work!',
     'author_fullname': 't2_24abogg',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'Python gave me the chance to finally execute a personal project for something I actually needed',
     'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'discussion',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1iyorr7',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.98,
     'author_flair_background_color': None,
     'subreddit_type': 'public',
     'ups': 274,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': None,
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Discussion',
     'can_mod_post': False,
     'score': 274,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [],
     'gildings': {},
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1740580151.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'text',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Not sure if this kind of post is allowed here but just wanted to celebrate this because it feels like a major milestone for me.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been a software dev for about 10 years but in that time I have never come up with ideas of problems at home that I could solve with code. If I had an idea, there was already a solution out there or it felt like it would take way too much effort to build and implement in Typescript/.NET, which is what I use for my job.&lt;/p&gt;\n\n&lt;p&gt;I recently picked up Python at work for a non-GUI data manipulation project and I was really surprised at how simple it is to set up and get going on. Feels like with the other languages I&amp;#39;ve tried out, you have to do so much configuration and build to even get off the ground, to the point where I&amp;#39;ve struggled in the past with tutorial courses because something doesn&amp;#39;t work in configuring the IDE or installing packages, etc.&lt;/p&gt;\n\n&lt;p&gt;Well the other day I was poking around with my home network software, trying to figure out if there was a way to get a notification when a certain device connects to the network - my son has been sneaking his school laptop into his room after bedtime to play games, and I absolutely did similar things as a kid but I have to at least try to be the responsible parent and make sure he&amp;#39;s getting enough sleep, right? There wasn&amp;#39;t any such functionality, but there was a REST API for checking on the status of clients connected to the network. I realized that I could use Python to set up a polling task that periodically pings that REST endpoint and checks if his Chromebook has connected.&lt;/p&gt;\n\n&lt;p&gt;Man, it was so easy to spin up code to make periodic REST calls, keep track of the active status of the device, and then send an email to my cell provider to trigger a text message on my phone if it changes from inactive to active. The only thing that took me a little bit longer was figuring out how virtual environments work. I also need to circle back and do some cleanup and better exception handling, etc, but that&amp;#39;s less important for a personal project that works great for now.&lt;/p&gt;\n\n&lt;p&gt;Packaged it up, threw it on Github (my first ever Github commit!), cloned it to my Linux thin client, and just run the script. So easy, didn&amp;#39;t have to follow millions of build or setup steps, and now I have a working &amp;quot;product&amp;quot; that does exactly what I need. So glad that I was introduced to Python, it really is a powerful language but at the same time so easy to jump into and make it work!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': None,
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#f50057',
     'id': '1iyorr7',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'IchWillRingen',
     'discussion_type': None,
     'num_comments': 36,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': None,
     'permalink': '/r/Python/comments/1iyorr7/python_gave_me_the_chance_to_finally_execute_a/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1iyorr7/python_gave_me_the_chance_to_finally_execute_a/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1740580151.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': "Hey folks, I wanted to share a Python repository template I've been using recently. It's not trying to be the ultimate solution, but rather a setup that works well for my needs and might be useful for others.\n\n**What My Project Does**\n\nIt's a repository template that combines several modern Python tools, with a focus on speed and developer experience:\n\n\\- UV for package management\n\n\\- Just as a command runner\n\n\\- Ruff for linting and formatting\n\n\\- Mypy for type checking\n\n\\- Docker support with a multi-stage build\n\n\\- GitHub Actions CI/CD setup\n\nThe main goal was to create a clean starting point that's both fast and maintainable.\n\n**Target Audience**\n\nThis template is meant for developers who want a production-ready setup but don't need all the bells and whistles of larger templates.\n\n**Comparison**\n\nThe main difference from other templates is the use of Just instead of Make as the command runner. While this means an extra installation step, Just offers several advantages, such as a cleaner syntax, better dependency handling and others.\n\nI also chose UV over pip for package management, but at this point I don't consider this as something unusual in the Python ecosystem.\n\nYou can find the template here: [https://github.com/GiovanniGiacometti/python-repo-template](https://github.com/GiovanniGiacometti/python-repo-template)\n\nHappy to hear your thoughts and suggestions for improvement!",
     'author_fullname': 't2_c8jit1ido',
     'saved': False,
     'mod_reason_title': None,
     'gilded': 0,
     'clicked': False,
     'title': 'A Modern Python Repository Template with UV and Just',
     'link_flair_richtext': [{'e': 'text', 't': 'Showcase'}],
     'subreddit_name_prefixed': 'r/Python',
     'hidden': False,
     'pwls': 6,
     'link_flair_css_class': 'showcase',
     'downs': 0,
     'thumbnail_height': None,
     'top_awarded_type': None,
     'hide_score': False,
     'name': 't3_1ime8ja',
     'quarantine': False,
     'link_flair_text_color': 'light',
     'upvote_ratio': 0.96,
     'author_flair_background_color': 'transparent',
     'subreddit_type': 'public',
     'ups': 263,
     'total_awards_received': 0,
     'media_embed': {},
     'thumbnail_width': None,
     'author_flair_template_id': '67d01c9c-537b-11ee-b0d0-7225f76af176',
     'is_original_content': False,
     'user_reports': [],
     'secure_media': None,
     'is_reddit_media_domain': False,
     'is_meta': False,
     'category': None,
     'secure_media_embed': {},
     'link_flair_text': 'Showcase',
     'can_mod_post': False,
     'score': 263,
     'approved_by': None,
     'is_created_from_ads_ui': False,
     'author_premium': False,
     'thumbnail': 'self',
     'edited': False,
     'author_flair_css_class': None,
     'author_flair_richtext': [{'e': 'text', 't': 'Pythonista'}],
     'gildings': {},
     'post_hint': 'self',
     'content_categories': None,
     'is_self': True,
     'mod_note': None,
     'created': 1739214686.0,
     'link_flair_type': 'richtext',
     'wls': 6,
     'removed_by_category': None,
     'banned_by': None,
     'author_flair_type': 'richtext',
     'domain': 'self.Python',
     'allow_live_comments': False,
     'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hey folks, I wanted to share a Python repository template I&amp;#39;ve been using recently. It&amp;#39;s not trying to be the ultimate solution, but rather a setup that works well for my needs and might be useful for others.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a repository template that combines several modern Python tools, with a focus on speed and developer experience:&lt;/p&gt;\n\n&lt;p&gt;- UV for package management&lt;/p&gt;\n\n&lt;p&gt;- Just as a command runner&lt;/p&gt;\n\n&lt;p&gt;- Ruff for linting and formatting&lt;/p&gt;\n\n&lt;p&gt;- Mypy for type checking&lt;/p&gt;\n\n&lt;p&gt;- Docker support with a multi-stage build&lt;/p&gt;\n\n&lt;p&gt;- GitHub Actions CI/CD setup&lt;/p&gt;\n\n&lt;p&gt;The main goal was to create a clean starting point that&amp;#39;s both fast and maintainable.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This template is meant for developers who want a production-ready setup but don&amp;#39;t need all the bells and whistles of larger templates.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The main difference from other templates is the use of Just instead of Make as the command runner. While this means an extra installation step, Just offers several advantages, such as a cleaner syntax, better dependency handling and others.&lt;/p&gt;\n\n&lt;p&gt;I also chose UV over pip for package management, but at this point I don&amp;#39;t consider this as something unusual in the Python ecosystem.&lt;/p&gt;\n\n&lt;p&gt;You can find the template here: &lt;a href="https://github.com/GiovanniGiacometti/python-repo-template"&gt;https://github.com/GiovanniGiacometti/python-repo-template&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Happy to hear your thoughts and suggestions for improvement!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;',
     'likes': None,
     'suggested_sort': None,
     'banned_at_utc': None,
     'view_count': None,
     'archived': False,
     'no_follow': False,
     'is_crosspostable': False,
     'pinned': False,
     'over_18': False,
     'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/2iqhITtNf6wx3tPBiKfw-MN-B-lNusGxPpKcVXXUMF0.jpg?auto=webp&amp;s=468f3d7bab447a6fe1d465be6bb9e1c8210e5852',
         'width': 1200,
         'height': 600},
        'resolutions': [{'url': 'https://external-preview.redd.it/2iqhITtNf6wx3tPBiKfw-MN-B-lNusGxPpKcVXXUMF0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=caa7385858bb11dc7ad3f853a026bac39572a83c',
          'width': 108,
          'height': 54},
         {'url': 'https://external-preview.redd.it/2iqhITtNf6wx3tPBiKfw-MN-B-lNusGxPpKcVXXUMF0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3812f3a817af738267a4a3a88694dd5bcc92db94',
          'width': 216,
          'height': 108},
         {'url': 'https://external-preview.redd.it/2iqhITtNf6wx3tPBiKfw-MN-B-lNusGxPpKcVXXUMF0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7ef8bc60deecefec51bf3ca53882b24c0167069f',
          'width': 320,
          'height': 160},
         {'url': 'https://external-preview.redd.it/2iqhITtNf6wx3tPBiKfw-MN-B-lNusGxPpKcVXXUMF0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ba76c4290e0b1e5410235a79afaf1deca2a22c70',
          'width': 640,
          'height': 320},
         {'url': 'https://external-preview.redd.it/2iqhITtNf6wx3tPBiKfw-MN-B-lNusGxPpKcVXXUMF0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c40d8c2744dc6ff6e41537da5cf8365e61b4fa2e',
          'width': 960,
          'height': 480},
         {'url': 'https://external-preview.redd.it/2iqhITtNf6wx3tPBiKfw-MN-B-lNusGxPpKcVXXUMF0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d805af7251689c1036951f852e3ed265d76ede97',
          'width': 1080,
          'height': 540}],
        'variants': {},
        'id': '1uLa4ALOGceBG3XnjKqSzebNIiRNZ--X_PG1Wqn80NI'}],
      'enabled': False},
     'all_awardings': [],
     'awarders': [],
     'media_only': False,
     'link_flair_template_id': 'f35fb004-c1ff-11ee-8305-565bc5d0cc73',
     'can_gild': False,
     'spoiler': False,
     'locked': False,
     'author_flair_text': 'Pythonista',
     'treatment_tags': [],
     'visited': False,
     'removed_by': None,
     'num_reports': None,
     'distinguished': None,
     'subreddit_id': 't5_2qh0y',
     'author_is_blocked': False,
     'mod_reason_by': None,
     'removal_reason': None,
     'link_flair_background_color': '#ff66ac',
     'id': '1ime8ja',
     'is_robot_indexable': True,
     'report_reasons': None,
     'author': 'GioGiac',
     'discussion_type': None,
     'num_comments': 75,
     'send_replies': True,
     'contest_mode': False,
     'mod_reports': [],
     'author_patreon_flair': False,
     'author_flair_text_color': 'dark',
     'permalink': '/r/Python/comments/1ime8ja/a_modern_python_repository_template_with_uv_and/',
     'stickied': False,
     'url': 'https://www.reddit.com/r/Python/comments/1ime8ja/a_modern_python_repository_template_with_uv_and/',
     'subreddit_subscribers': 1333784,
     'created_utc': 1739214686.0,
     'num_crossposts': 0,
     'media': None,
     'is_video': False}},
   {'kind': 't3',
    'data': {'approved_at_utc': None,
     'subreddit': 'Python',
     'selftext': 'I was looking for a function that would return the numerical value of a loglevel given as text. But I found only the reverse function per the [documentation](https://docs.python.org/3/library/logging.html):\n\n&gt;logging.getLevelName(*level*) Returns the textual or numeric representation of logging level *level*.\n\nThat\'s exactly the reverse of what I need. But wait, there\'s more:\n\n&gt;The *level* parameter also accepts a string representation of the level such as ‘INFO’. In such cases, this functions returns the corresponding numeric value of the level.\n\nSo a function that maps integers to strings, with a name that clearly implies that it returns strings, also can map strings to integers if you pass in a string. A function whose return type depends on the input type, neat!\n\nOK, so what happens when you pass in a value that has no number / name associated with it? Surely the function will return zero or raise a KeyError. But no:\n\n&gt;If no matching numeric or string value is passed in, the string ‘Level %s’ % level is returned.\n\nFantastic! If I pass a string into a function called "get..Name()" it will return an integer on success and a string on failure!\n\nBut somebody, at some point, a sane person noticed that this is a mess:\n\n&gt;Changed in version 3.4: In Python versions earlier than 3.4, this function could also be passed a text level, and would return the corresponding numeric value of the level. This undocumented behaviour was considered a mistake, and was removed in Python 3.4, but reinstated in 3.4.2 due to retain backward compatibility.\n\nOK, nice. But why on Earth didn\'t the people who reinstated the original functionality also add a function getLevelNumber()?\n\nYes, I did see this:\n\n&gt;logging.getLevelNamesMapping()\n\n&gt;Returns a mapping from level names to their corresponding logging levels. For example, the string “CRITICAL” maps to [`CRITICAL`](https://docs.python.org/3/library/logging.html#logging.CRITICAL). The returned mapping is copied from an internal mapping on each call to this function.\n\n&gt;Added in version 3.11.\n\nOK, that\'s usable. But it also convoluted. Why do I need to get a whole deep copy of a mapping when the library could...(truncated)